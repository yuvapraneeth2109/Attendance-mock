{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3000';\n\n// Start a new attendance session with the given subject\nexport async function startSession(subject) {\n  const response = await fetch(`${API_BASE_URL}/session/start`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      subject\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to start session');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n\n// Get session details by session ID\nexport async function getSessionDetails(sessionId) {\n  const response = await fetch(`${API_BASE_URL}/session/${sessionId}`);\n  if (!response.ok) {\n    throw new Error('Session not found');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n\n// Check in attendee identified by roll number to a session\nexport async function checkIn(sessionId, rollNo) {\n  const response = await fetch(`${API_BASE_URL}/session/${sessionId}/checkin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      roll_no: rollNo\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Check-in failed');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n\n// End an active session by session ID\nexport async function endSession(sessionId) {\n  const response = await fetch(`${API_BASE_URL}/session/${sessionId}/end`, {\n    method: 'POST'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to end session');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}","map":{"version":3,"names":["API_BASE_URL","startSession","subject","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","getSessionDetails","sessionId","checkIn","rollNo","roll_no","endSession"],"sources":["/Users/harshameghanamacha/Library/CloudStorage/OneDrive-Personal/Desktop/SIGMA-DEVELOPMENT/PROJECT_p/frontend/src/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3000';\n\n// Start a new attendance session with the given subject\nexport async function startSession(subject) {\n  const response = await fetch(`${API_BASE_URL}/session/start`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ subject }),\n  });\n  if (!response.ok) {\n    throw new Error('Failed to start session');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n\n// Get session details by session ID\nexport async function getSessionDetails(sessionId) {\n  const response = await fetch(`${API_BASE_URL}/session/${sessionId}`);\n  if (!response.ok) {\n    throw new Error('Session not found');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n\n// Check in attendee identified by roll number to a session\nexport async function checkIn(sessionId, rollNo) {\n  const response = await fetch(`${API_BASE_URL}/session/${sessionId}/checkin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ roll_no: rollNo }),\n  });\n  if (!response.ok) {\n    throw new Error('Check-in failed');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n\n// End an active session by session ID\nexport async function endSession(sessionId) {\n  const response = await fetch(`${API_BASE_URL}/session/${sessionId}/end`, {\n    method: 'POST',\n  });\n  if (!response.ok) {\n    throw new Error('Failed to end session');\n  }\n  return response.json(); // <- Return here, after checking response.ok\n}\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA,OAAO,eAAeC,YAAYA,CAACC,OAAO,EAAE;EAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,gBAAgB,EAAE;IAC5DK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAQ,CAAC;EAClC,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeC,iBAAiBA,CAACC,SAAS,EAAE;EACjD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,YAAYc,SAAS,EAAE,CAAC;EACpE,IAAI,CAACX,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;EACtC;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeG,OAAOA,CAACD,SAAS,EAAEE,MAAM,EAAE;EAC/C,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,YAAYc,SAAS,UAAU,EAAE;IAC3ET,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEQ,OAAO,EAAED;IAAO,CAAC;EAC1C,CAAC,CAAC;EACF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeM,UAAUA,CAACJ,SAAS,EAAE;EAC1C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,YAAYc,SAAS,MAAM,EAAE;IACvET,MAAM,EAAE;EACV,CAAC,CAAC;EACF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}